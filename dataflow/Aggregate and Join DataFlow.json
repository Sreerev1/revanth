{
	"name": "Aggregate and Join DataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "Employees"
				},
				{
					"name": "Department"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "AggregateOnDep"
				},
				{
					"name": "JoinOnDep"
				}
			],
			"scriptLines": [
				"source(output(",
				"          employee_id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          department_id as string,",
				"          Prop_4 as string,",
				"          Prop_5 as string,",
				"          Prop_6 as string,",
				"          Prop_7 as string,",
				"          Prop_8 as string,",
				"          Prop_9 as string,",
				"          Prop_10 as string,",
				"          Prop_11 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> Employees",
				"source(output(",
				"          Employee_id as string,",
				"          First_Name as string,",
				"          Last_Name as string,",
				"          Gender as string,",
				"          Salary as string,",
				"          Date_of_Birth as string,",
				"          Age as string,",
				"          Country as string,",
				"          Department_id as string,",
				"          Date_of_Joining as string,",
				"          Manager_id as string,",
				"          Currency as string,",
				"          End_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> Department",
				"Employees aggregate(groupBy(department_id),",
				"     TotalEmployees = count(employee_id)) ~> AggregateOnDep",
				"AggregateOnDep, Department join(AggregateOnDep@department_id == Department@Department_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinOnDep",
				"JoinOnDep sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['TotalEmpByDepLatest.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}